*awk-ward.txt*	For Neovim version 0.4	Last change: 2020-04-21

                                                               *awk-ward.nvim*
               ___           __                                __~
              /   |_      __/ /__     _      ______ __________/ /~
             / /| | | /| / / //_/____| | /| / / __ `/ ___/ __  /~
            / ___ | |/ |/ / ,< /_____/ |/ |/ / /_/ / /  / /_/ /~
           /_/  |_|__/|__/_/|_|      |__/|__/\__,_/_/   \__,_/~

                                               Live Awk programming in Neovim~

Author: Alejandro "HiPhish" Sanchez
License: MIT (Expat) License

Repository:
    - https://gitlab.com/HiPhish/awk-ward.nvim
    - https://github.com/HiPhish/awk-ward.nvim (mirror)

Issue tracker:
    - https://gitlab.com/HiPhish/awk-ward.nvim/-/issues (preferred)
    - https://github.com/HiPhish/awk-ward.nvim/issues


==============================================================================
TABLE OF CONTENTS                                          *awk-ward-contents*

    1. Introduction ..................................... |awk-ward-intro|
    2. Setup and configuration .......................... |awk-ward-setup|
    3. Commands ......................................... |awk-ward-commands|
    4. Functions ........................................ |awk-ward-functions|
    5. Advanced ......................................... |awk-ward-advanced|



==============================================================================
INTRODUCTION                                           *awk-ward-introduction*

Awk is a domain-specific programming language for transforming text files. As
such a regular REPL is not appropriate for running Awk programs live, we need
two separate inputs: the program and the text to transform. Awk-ward makes it
easy to edit and preview your Awk scripts live by spawning an Awk process and
writing the result to an output buffer.

In the context of Awk-ward a "program" is the Awk script you wish to run, an
"input" is the data you want the script to run on, and the "output" is the
transformed data. The program is always read from a buffer, and the output is
written to a buffer. The input can come either from a buffer or from a file.

 

==============================================================================
SETUP AND CONFIGURATION                                       *awk-ward-setup*

You first need a standalone implementation of Awk installed on your system. A
Unix system should come with the `awk` command already set up. If you wish to
specify your own Awk implementation you can set the value of the |g:awkprg|,
|t:awkprg| or |b:awkprg| variable to the path of the binary.


------------------------------------------------------------------------------
g:awkprg  (default "awk")                                           *g:awkprg*
b:awkprg                                                            *b:awkprg*
t:awkprg                                                            *t:awkprg*

Global, tab-local and buffer-local setting for the path to the Awk binary in
ascending order or precedence.



==============================================================================
COMMANDS                                                   *awk-ward-commands*

------------------------------------------------------------------------------
                                                                    *:AwkWard*
:AwkWard setup [-F {fs}] [-v {var}={value} ...] [-input {b}] [-inbuf {b}]
         [-infile {f}]

:AwkWard run

:AwkWard stop

:AwkWard [-F {fs}] [-v {var}={value} ...] [-input {b}] [-inbuf {b}]
         [-infile {f}] [-output {b}] [-outbuf {b}]

The main command allows one to set up, run and stop Awk-ward in the current
buffer. If none of the main commands are given a sensible default is chosen:

  - If Awk-ward was not set up it is set up and run
  - If Awk-ward was set up and no arguments were supplied it is run
  - If Awk-ward was set up and arguments were supplied it is stopped and
    re-set with the arguments, then run

The main commands are as follows:

setup~
Same as calling |awk_ward#setup()| with the current buffer as first argument
and the remaining arguments supplied as the options.

The option `-F` options passes {fs} as the field separator to Awk.

The `-v` option passes {value} as the variable {var} to Awk. There can be
multiple such pairs given and they will all get passed to Awk. Use `\=` to
escape `=` in {var} and {value}; the escape will be removed before passing
them on to Awk.  Each individual {var}={value} pair must be preceded by `-v`.

The options `-input` (a buffer name), `-inbuf` (a buffer number) and `-infile`
(a file name) are mutually exclusive and specify the input file or input
buffer ID to use. If a file is chosen no input buffer will be opened. If none
are specified then a new 'buftype'="nofile" input buffer will be created.

The options `-output` (a buffer name) and `-outbuf` (a buffer number) are
mutually exclusive and specify the buffer to use for output. If neither is
specified a new 'buftype'="nofile" output buffer will be created

The exact handling of `-F` and `-v` is dependent on your Awk implementation.

run~
Same as calling |awk_ward#run()| with the Awk-ward settings (|b:awk_ward|) of
the current buffer as the argument.

stop~
Same as calling |awk_ward#stop()| with the Awk-ward settings (|b:awk_ward|) of
the current buffer as the argument.



==============================================================================
FUNCTIONS                                                 *awk-ward-functions*

Functions offer a less convenient, but more direct access to Awk-ward.


------------------------------------------------------------------------------
awk_ward#setup({progbuf}, {awk_options})                    *awk_ward#setup()*

Set up Awk-ward with the settings {awk_options} for program buffer handle
{progbuf}. The argument {awk_options} is a dictionary whose contents are
similar to the arguments accepted by |:AwkWard|. It is an error to set up
Awk-ward if it is already set up, you have to stop Awk-ward first (see
|:AwkWard| and |awk_ward#stop()|).

The following keys are supported for {awk_options}:

- `outbuf`   Buffer to display output in
- `inbuf`    Buffer to read input from (conflicts with `infile`)
- `infile`   File to read input from (conflicts with `inbuf`)
- `fs`       Field separator for use with Awk
- `vars`     List of `[key, value]` pairs to use a variables in Awk

If `outbuf` is not specified a new buffer will be created. The options `infile`
and `inbuf` are mutually exclusive. If neither is specified a new input buffer
will be created.


------------------------------------------------------------------------------
awk_ward#run({awk_ward})                                      *awk_ward#run()*

Run Awk-ward on the buffer {b}. It is an error to run Awk-ward if it has not
yet been set up.


------------------------------------------------------------------------------
awk_ward#stop({awk_ward})                                    *awk_ward#stop()*

Perform the following on the Awk-ward setup of buffer {b}:

  - wipe the output buffer
  - wipe the input buffer if it was created by Awk-ward
  - delete autocommands set up by Awk-ward
  - Delete the |b:awk_ward| variable.



==============================================================================
ADVANCED                                                   *awk-ward-advanced*

------------------------------------------------------------------------------
b:awk_ward                                                        *b:awk_ward*

Dictionary holding various Awk-ward settings for a buffer. Check for the
existence of this variable if you want to know whether Awk-ward has been set
up for a buffer.

 

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:

